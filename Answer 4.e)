import numpy as np
import matplotlib.pyplot as plt
from sklearn.neural_network import MLPClassifier
from sklearn.datasets import make_moons

# Generate two moons data with 100 samples and Gaussian noise with a standard deviation of 0.3
X, y = make_moons(n_samples=1000, noise=0.1, random_state=42)

# Define and train the MLPClassifier with two hidden layers, each containing 100 nodes
mlp = MLPClassifier(hidden_layer_sizes=(100, 100),learning_rate_init=0.1,alpha = 0.8, activation='relu', solver='adam', random_state=42)
mlp.fit(X, y)

# Plot the decision boundary
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
Z = mlp.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.8)
plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1, edgecolors='k')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('Decision Boundary for MLP Classifier')
plt.show()
